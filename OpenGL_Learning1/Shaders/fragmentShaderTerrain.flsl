#version 330 core
in vec2 Tcordinates;
in vec3 normalCoords;
in vec3 FragPosition;

out vec4 fragCoords;

uniform sampler2D ourTexture1;
uniform sampler2D ourTexture2;

struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;

};

struct Light
{
	vec3 position;

	vec3 ambientLight;
	vec3 diiffuseLight;
	vec3 specularLight;

};


uniform Light light;
uniform Material material;

uniform vec3 viewPos;

void main()
{
    vec3 ambient = light.ambientLight * material.ambient;

	
	vec3 norm = normalize(normalCoords);
	vec3 lightDir = normalize(light.position - FragPosition);
	
	vec3 viewDir = normalize(viewPos - FragPosition);
	vec3 reflectDir = reflect(-lightDir,norm);

	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diiffuseLight * (diff * material.diffuse);	
	
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specularLight * (spec * material.specular);

	
	vec3 result = (ambient + diffuse + specular);
	fragCoords =  mix(texture(ourTexture1,Tcordinates),texture(ourTexture2,vec2(((1.0f-Tcordinates.x )* 200.0f),((1.0f-Tcordinates.y) * 200.0f))),0.4f) *  vec4(result, 1.0f);

}